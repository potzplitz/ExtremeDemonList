name: Java Maven Build & Publish Artifact

on:
  push:
    branches: [main, feature/*] # Specify the branches to trigger on

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Check for [release] in commit message
        id: check_release
        run: |
          if echo "${{ github.event.head_commit.message }}" | grep -q "\[release\]"; then
            echo "Release tag found in commit message, proceeding with the workflow..."
            echo "::set-output name=proceed::true"
          else
            echo "Release tag not found in commit message, stopping the workflow..."
            echo "::set-output name=proceed::false"
          fi

      - name: Set up JDK 17
        if: steps.check_release.outputs.proceed == 'true'
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        if: steps.check_release.outputs.proceed == 'true'
        run: mvn -B package --file pom.xml

      # Ensure all subsequent steps that depend on the build/release process also include the conditional check
      # Example for the Upload artifact step; repeat for others as necessary

      - name: Upload artifact
        if: steps.check_release.outputs.proceed == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: packaged-jar
          path: target/*.jar

      # Correct and continue your steps with the appropriate conditional checks and proper configurations

      - name: Set release tag
        if: steps.check_release.outputs.proceed == 'true'
        run: echo "::set-output name=RELEASE_TAG::$(date +'%Y%m%d%H%M%S')"

      # Add the conditional checks to all steps that should only run if the release tag is present

      - name: Create Release
        if: steps.check_release.outputs.proceed == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.set_release_tag.outputs.RELEASE_TAG }}
          release_name: ExtremeDemonList v${{ steps.set_release_tag.outputs.RELEASE_TAG }}
          body: ${{ steps.get_commit_info.outputs.COMMIT_DESC }}
          draft: false
          prerelease: false

      - name: Upload Artifact as Release Asset
        if: steps.check_release.outputs.proceed == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: extracted-jar/ExtremeDemonList-0.0.1-SNAPSHOT-jar-with-dependencies.jar
          asset_name: ExtremeDemonList-0.0.1-SNAPSHOT-jar-with-dependencies.jar
          asset_content_type: application/java-archive # Corrected content type for a JAR file
